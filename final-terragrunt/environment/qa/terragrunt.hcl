/**
 * QA Environment Configuration
 * 
 * This configuration defines the QA environment for EKS deployment.
 * QA environment is used for pre-production testing and validation.
 * 
 * @environment qa
 * @cluster_name eks-deployment-qa
 * @deployment_stage stage_04_addons
 */

# Include root configuration
include "root" {
  path = find_in_parent_folders()
}

# Point to the eks-deployment module for orchestrated deployment
terraform {
  source = "../../modules//eks-deployment"
}

/**
 * Deployment Protection
 * 
 * Enables destroy protection for QA environment to prevent
 * accidental infrastructure deletion.
 */
prevent_destroy = true

/**
 * Auto-generated Files
 * 
 * Generates terraform.tfvars file with environment-specific
 * metadata for tracking and debugging purposes.
 */
generate "terraform.tfvars" {
  path      = "terraform.tfvars"
  if_exists = "overwrite"
  contents = <<EOF
# Auto-generated by Terragrunt for ${local.environment} environment
# Current stage: ${local.current_stage}
# Generated at: ${timestamp()}
EOF
}

/**
 * Version Constraints
 * 
 * Enforces minimum versions for Terragrunt and Terraform
 * to ensure compatibility with advanced features.
 */
terragrunt_version_constraint = ">= 0.50.0"
terraform_version_constraint  = ">= 1.3.0"

/**
 * Local Variables
 * 
 * Environment-specific configuration variables used throughout
 * the deployment configuration.
 */
locals {
  /**
   * Environment Configuration
   * 
   * Basic environment settings that define the deployment context
   * and determine resource naming patterns.
   */
  environment = "qa"
  region      = "us-east-1"
  
  /**
   * VPC Configuration
   * 
   * Network configuration with smart defaults for VPC discovery.
   * Leave vpc_id empty for name-based auto-discovery.
   * 
   * @param vpc_name - VPC name for auto-discovery
   * @param vpc_id - Explicit VPC ID (overrides name-based discovery)
   */
  vpc_name = "my-manual-vpc"
  vpc_id   = ""
  
  /**
   * Cluster Configuration
   * 
   * EKS cluster naming and basic setup parameters.
   * Cluster name follows environment-specific naming convention.
   */
  cluster_name = "eks-deployment-qa"
  
  /**
   * Cost Optimization
   * 
   * QA environment uses moderate cost optimization while maintaining
   * production-like characteristics for proper testing.
   */
  cost_optimized = false
  
  /**
   * Deployment Stages
   * 
   * Five-stage deployment process:
   * - Stage 1: VPC Discovery and networking setup
   * - Stage 2: EKS Cluster provisioning
   * - Stage 3: Node Groups deployment
   * - Stage 4: EKS Addons installation
   * - Stage 5: Monitoring stack setup
   * 
   * @current_stage - Active deployment stage
   */
  current_stage = "stage_01_vpc"
  
  /**
   * Provider Version Overrides
   * 
   * Optional provider version constraints for QA environment.
   * Uncomment specific versions for testing new provider releases.
   */
  provider_version_overrides = {
    # aws        = "~> 5.50"
    # helm       = "~> 2.16"
    # kubernetes = "~> 2.37"
    # tls        = "~> 3.9"
  }
  
  /**
   * Environment-Specific Resource Configuration
   * 
   * QA environment resource sizing that balances cost efficiency
   * with production-like performance characteristics.
   * 
   * @node_instance_types - EC2 instance types for worker nodes
   * @node_desired_size - Target number of worker nodes
   * @node_max_size - Maximum worker nodes for auto-scaling
   * @disk_size - EBS root volume size in GB
   */
  environment_config = {
    node_instance_types = local.cost_optimized ? ["t3.medium"] : ["t3.medium", "t3.large"]
    node_desired_size   = local.cost_optimized ? 2 : 3
    node_max_size       = local.cost_optimized ? 4 : 6
    disk_size          = local.cost_optimized ? 30 : 50
    enable_monitoring   = true
  }
  
  /**
   * Stage Validation
   * 
   * Validates the current_stage value against allowed stages
   * to prevent configuration errors.
   */
  valid_stages = ["stage_01_vpc", "stage_02_cluster", "stage_03_nodes", "stage_04_addons", "stage_05_monitoring"]
  stage_valid  = contains(local.valid_stages, local.current_stage)
  
  /**
   * Environment Tags
   * 
   * Standard tagging strategy for QA environment resources
   * supporting cost allocation and resource management.
   */
  qa_tags = {
    Environment     = local.environment
    Purpose        = "quality-assurance"
    CostCenter     = "engineering-qa"
    AutoShutdown   = "false"
    Stage          = local.current_stage
    Criticality    = "medium"
  }
  
  /**
   * DRY Improvement: Stage Configuration Matrix
   * 
   * Stage configuration matrix is now centralized in root terragrunt.hcl
   * This eliminates duplication across all environments and provides
   * a single source of truth for stage progression logic.
   * 
   * The stage_config_matrix is inherited from the parent configuration.
   */
}

/**
 * Input Variables
 * 
 * Configuration inputs passed to the EKS deployment module.
 * These values configure the entire infrastructure stack.
 */
inputs = {
  /**
   * Core Configuration
   * 
   * Fundamental settings required by all modules and providers.
   * These values must align with root configuration.
   */
  environment   = local.environment
  project_name  = "eks-deployment"
  cluster_name  = local.cluster_name
  region        = local.region
  aws_region    = local.region
  
  /**
   * Provider Configuration
   * 
   * AWS provider settings including account restrictions
   * and organizational metadata.
   */
  allowed_account_ids = ["436123228774"]
  owner              = "platform-team"
  cost_center        = "Engineering"
  
  /**
   * Resource Tagging
   * 
   * Comprehensive tagging strategy combining standard project tags
   * with environment-specific metadata.
   */
  common_tags = merge(
    {
      Project     = "eks-deployment"
      Environment = local.environment
      ManagedBy   = "Terragrunt"
    },
    local.qa_tags
  )
  
  /**
   * VPC Configuration
   * 
   * Network discovery and validation settings.
   * Supports both explicit VPC ID and name-based discovery.
   * 
   * @vpc_id - Explicit VPC identifier
   * @vpc_name - VPC name for auto-discovery
   * @private_subnet_tags - Tags to identify private subnets
   * @public_subnet_tags - Tags to identify public subnets
   */
  vpc_id              = local.vpc_id
  vpc_name            = local.vpc_name
  private_subnet_tags = ["Private", "private"]
  public_subnet_tags  = ["Public", "public"]
  use_name_filter     = true
  validate_network    = true
  
  /**
   * DRY: Stage Control - Progressive Deployment
   * 
   * Uses simplified stage logic that eliminates the need for
   * duplicated stage configuration matrices across environments.
   * Each stage builds upon the previous stages.
   */
  current_stage             = local.current_stage
  enable_stage_01_vpc       = contains(["stage_01_vpc", "stage_02_cluster", "stage_03_nodes", "stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_stage_02_cluster   = contains(["stage_02_cluster", "stage_03_nodes", "stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_stage_03_nodes     = contains(["stage_03_nodes", "stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_stage_04_addons    = contains(["stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_stage_05_monitoring = local.current_stage == "stage_05_monitoring"
  
  /**
   * Bastion Configuration
   * 
   * Bastion host settings for secure cluster access.
   * Enabled in QA for secure administrative access.
   */
  enable_bastion = true
  
  /**
   * EKS Cluster Configuration
   * 
   * Kubernetes cluster version and basic settings.
   * Uses latest supported EKS version for testing.
   * 
   * @cluster_version - Kubernetes version (1.33 latest as of 2025-09-02)
   */
  cluster_version = "1.33"
  
  /**
   * Security Configuration
   * 
   * QA environment uses restricted public access with specific CIDR blocks
   * for enhanced security while maintaining accessibility for testing.
   * 
   * @endpoint_private_access - Enable private API endpoint
   * @endpoint_public_access - Enable public API endpoint
   * @public_access_cidrs - CIDR blocks allowed for public access
   */
  endpoint_private_access          = true
  endpoint_public_access           = true
  public_access_cidrs              = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
  eks_create_private_access_sg     = true
  eks_private_access_cidrs         = ["10.0.0.0/16"]
  eks_additional_security_group_ids = []
  
  /**
   * Encryption Configuration
   * 
   * Cluster encryption settings using AWS KMS.
   * QA environment uses encryption for data protection validation.
   * 
   * @enable_cluster_encryption - Enable EKS cluster envelope encryption
   * @kms_key_alias - KMS key alias for encryption
   */
  enable_cluster_encryption = true
  kms_key_arn              = ""
  kms_key_alias            = "alias/qa-eks-cluster-cluster-key"
  
  /**
   * Node Group Configuration
   * 
   * Worker node specifications sized for QA workload requirements.
   * Balances performance needs with cost efficiency.
   * 
   * @node_instance_types_general - EC2 instance types
   * @capacity_type - ON_DEMAND for stability in QA
   * @disk_size - EBS root volume size
   */
  node_instance_types_general = local.environment_config.node_instance_types
  node_desired_size_general   = local.environment_config.node_desired_size
  node_max_size_general       = local.environment_config.node_max_size
  node_min_size_general       = 1
  capacity_type              = "ON_DEMAND"
  disk_size                  = local.environment_config.disk_size
  
  /**
   * DRY: EKS Addons Configuration
   * 
   * Essential cluster addons for networking, storage, and core functionality.
   * Uses simplified stage logic without duplicated configuration matrices.
   * 
   * @enable_vpc_cni - AWS VPC CNI plugin
   * @enable_kube_proxy - Kubernetes network proxy
   * @enable_coredns - DNS resolver
   * @enable_ebs_csi_driver - EBS Container Storage Interface
   * @create_irsa_roles - IAM Roles for Service Accounts
   */
  enable_vpc_cni        = contains(["stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_kube_proxy     = contains(["stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_coredns        = contains(["stage_04_addons", "stage_05_monitoring"], local.current_stage)
  enable_ebs_csi_driver = contains(["stage_04_addons", "stage_05_monitoring"], local.current_stage)
  create_irsa_roles     = contains(["stage_04_addons", "stage_05_monitoring"], local.current_stage)
  
  /**
   * Monitoring Configuration
   * 
   * Observability stack configuration for QA environment.
   * Full monitoring enabled for comprehensive testing validation.
   * 
   * @enable_prometheus - Prometheus metrics collection
   * @enable_kong - Kong API Gateway (disabled for cost optimization)
   * @monitoring_namespace - Kubernetes namespace for monitoring
   * @grafana_admin_password - Grafana administrator password
   */
  enable_prometheus         = local.environment_config.enable_monitoring
  enable_kong              = false
  monitoring_namespace     = "monitoring"
  grafana_admin_password   = "qa-admin-secure-2025"
  prometheus_storage_size  = "50Gi"
  grafana_storage_size     = "20Gi"
  grafana_ingress_enabled  = true
  grafana_ingress_host     = "grafana-qa.internal.company.com"
  
  /**
   * Cluster Connection Information
   * 
   * These values are auto-populated by the EKS cluster module.
   * Initial placeholder values are replaced during deployment.
   * 
   * @cluster_endpoint - EKS API server endpoint
   * @cluster_ca_certificate - Base64-encoded cluster CA certificate
   * @oidc_provider_arn - OIDC provider ARN for IRSA configuration
   */
  cluster_endpoint      = ""
  cluster_ca_certificate = ""
  oidc_provider_arn     = ""
}
