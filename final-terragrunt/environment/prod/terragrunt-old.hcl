# ========================================
# Production ENVIRONMENT CONFIGURATION
# ========================================
# This configuration defines the sandbox environment for EKS deployment
# Sandbox is used for development and testing purposes
# Stage-wise deployment: Run with different enable flags for each stage

# Include root configuration
include "root" {
  path = find_in_parent_folders()
}

# Point to the eks-deployment module for orchestrated deployment
terraform {
  source = "../../modules//eks-deployment"
}

# Prevent accidentally running terraform commands
prevent_destroy = false  # Set to true to prevent accidental destroy

# Generate additional files for better management
generate "terraform.tfvars" {
  path      = "terraform.tfvars"
  if_exists = "overwrite"
  contents = <<EOF
# Auto-generated by Terragrunt for ${local.environment} environment
# Current stage: ${local.current_stage}
# Generated at: ${timestamp()}
EOF
}

# Dependency management for stages (commented out as we're using single module approach)
# dependency "vpc_data" {
#   config_path = "../01-vpc-data"
#   skip_outputs = local.current_stage == "stage_01_vpc"
# }

# Stage validation
terragrunt_version_constraint = ">= 0.50.0"
terraform_version_constraint  = ">= 1.3.0"

# Local variables for sandbox environment
locals {
  # Environment configuration
  environment = "prod"
  region      = "us-east-1"  # Override root if needed
  
  # VPC configuration with smart defaults
  vpc_name = "my-manual-vpc"  # Leave empty to use default VPC or specify your VPC name
  vpc_id   = ""  # Leave empty for auto-discovery
  
  # Cluster configuration
  cluster_name = "eks-deployment-prod"
  
  # Cost optimization for sandbox
  cost_optimized = true
  
  # Stage control - Enable only Stage 1 for first deployment
  # DEPLOYMENT STAGES:
  # Stage 1: VPC Discovery
  # Stage 2: EKS Cluster
  # Stage 3: Node Groups
  # Stage 4: EKS Addons
  # Stage 5: Monitoring
  
  # Current deployment stage - CHANGE THIS TO PROGRESS
  current_stage = "stage_01_vpc"  # Options: stage_01_vpc, stage_02_cluster, stage_03_nodes, stage_04_addons, stage_05_monitoring
  
  # Environment-specific provider version overrides (optional)
  # Uncomment to override specific provider versions for sandbox only
  provider_version_overrides = {
    # aws        = "~> 5.50"  # Override AWS version for sandbox testing
    # helm       = "~> 2.16"  # Override Helm version for sandbox
    # kubernetes = "~> 2.37"  # Override Kubernetes version for sandbox
    # tls        = "~> 3.9"   # Override TLS version for sandbox
  }
  
  # Environment-specific overrides
  environment_config = {
    node_instance_types = local.cost_optimized ? ["t3.small", "t3.medium"] : ["t3.medium", "t3.large"]
    node_desired_size   = local.cost_optimized ? 1 : 2
    node_max_size       = local.cost_optimized ? 2 : 4
    disk_size          = local.cost_optimized ? 20 : 50
    enable_monitoring   = false  # Disabled for prod to save costs
  }
  
  # Validation - ensure stage progression
  valid_stages = ["stage_01_vpc", "stage_02_cluster", "stage_03_nodes", "stage_04_addons", "stage_05_monitoring"]
  stage_valid  = contains(local.valid_stages, local.current_stage)
  
  # Common tags for this environment
  prod_tags = {
    Environment     = local.environment
    Purpose        = "development-testing"
    CostCenter     = "engineering-sandbox"
    AutoShutdown   = "true"  # For cost management
    Stage          = local.current_stage
  }
  
  stage_config = {
    stage_01_vpc = {
      enable_stage_01_vpc        = true
      enable_stage_02_cluster    = false
      enable_stage_03_nodes      = false
      enable_stage_04_addons     = false
      enable_stage_05_monitoring = false
    }
    stage_02_cluster = {
      enable_stage_01_vpc        = true   # Always needed
      enable_stage_02_cluster    = true
      enable_stage_03_nodes      = false
      enable_stage_04_addons     = false
      enable_stage_05_monitoring = false
    }
    stage_03_nodes = {
      enable_stage_01_vpc        = true   # Always needed
      enable_stage_02_cluster    = true   # Always needed
      enable_stage_03_nodes      = true
      enable_stage_04_addons     = false
      enable_stage_05_monitoring = false
    }
    stage_04_addons = {
      enable_stage_01_vpc        = true   # Always needed
      enable_stage_02_cluster    = true   # Always needed
      enable_stage_03_nodes      = true   # Always needed
      enable_stage_04_addons     = true
      enable_stage_05_monitoring = false
    }
    stage_05_monitoring = {
      enable_stage_01_vpc        = true   # Always needed
      enable_stage_02_cluster    = true   # Always needed
      enable_stage_03_nodes      = true   # Always needed
      enable_stage_04_addons     = true   # Always needed
      enable_stage_05_monitoring = true
    }
  }
}

# Environment-specific inputs
inputs = {
  # Core configuration (required by root and modules)
  environment   = local.environment
  project_name  = "eks-deployment"  # Must match root configuration
  cluster_name  = local.cluster_name
  region        = local.region      # Module expects 'region'
  aws_region    = local.region      # Provider expects 'aws_region'
  
  # Provider configuration variables
  allowed_account_ids = ["436123228774"]
  owner              = "platform-team"
  cost_center        = "Engineering"
  common_tags   = merge(
    {
      Project     = "eks-deployment"
      Environment = local.environment
      ManagedBy   = "Terragrunt"
    },
      local.prod_tags
  )
  
  # VPC Configuration (Stage 1)
  vpc_id              = local.vpc_id
  vpc_name            = local.vpc_name
  private_subnet_tags = ["Private", "private"]
  public_subnet_tags  = ["Public", "public"]
  use_name_filter     = true   # Use name-based filtering
  validate_network    = true   # Validate network setup
  
  # Stage Control - Current stage configuration
  enable_stage_01_vpc        = local.stage_config[local.current_stage].enable_stage_01_vpc
  enable_stage_02_cluster    = local.stage_config[local.current_stage].enable_stage_02_cluster
  enable_stage_03_nodes      = local.stage_config[local.current_stage].enable_stage_03_nodes
  enable_stage_04_addons     = local.stage_config[local.current_stage].enable_stage_04_addons
  enable_stage_05_monitoring = local.stage_config[local.current_stage].enable_stage_05_monitoring
  
  # Bastion Configuration (disabled for prod)
  enable_bastion = false
  
  # EKS Cluster Configuration (for future stages)
  # choose latest version from https://docs.aws.amazon.com/eks/latest/userguide/kubernetes-versions.html
  # 1.33 is the latest version as of 2025-09-02 with Offers the longest remaining support window
  cluster_version = "1.33"
  
  # Security Configuration (for future stages)
  # COMMENTED OUT: Private-only access prevents kubectl from local machine
  # endpoint_private_access          = true
  # endpoint_public_access           = false  # More secure for prod
  # public_access_cidrs              = []     # No public access
  
  # FIXED: Enable both private and public access for development convenience
  endpoint_private_access          = true
  endpoint_public_access           = true   # Enable public access for kubectl
  public_access_cidrs              = ["0.0.0.0/0"]  # Allow from anywhere (development only)
  eks_create_private_access_sg     = false  # No bastion in prod
  eks_private_access_cidrs         = []
  eks_additional_security_group_ids = []
  
  # Encryption (disabled for prod to reduce complexity)
  enable_cluster_encryption = false
  kms_key_arn              = ""
  kms_key_alias            = "alias/qa-eks-cluster-cluster-key"  # Available KMS key for EKS
  
  # Node Group Configuration (corrected variable names)
  node_instance_types_general = local.environment_config.node_instance_types
  node_desired_size_general   = local.environment_config.node_desired_size
  node_max_size_general       = local.environment_config.node_max_size
  node_min_size_general       = 1
  capacity_type              = "SPOT"  # Cost optimization for prod
  disk_size                  = local.environment_config.disk_size
  
  # Addons Configuration (stage-aware)
  enable_vpc_cni        = local.stage_config[local.current_stage].enable_stage_04_addons
  enable_kube_proxy     = local.stage_config[local.current_stage].enable_stage_04_addons  
  enable_coredns        = local.stage_config[local.current_stage].enable_stage_04_addons
  enable_ebs_csi_driver = local.stage_config[local.current_stage].enable_stage_04_addons
  create_irsa_roles     = local.stage_config[local.current_stage].enable_stage_04_addons
  
  # Monitoring Configuration (stage-aware with cost optimization)
  # FIXED: Enable monitoring for testing (ignoring cost optimization) prod
  enable_prometheus         = false  # Temporarily disable Prometheus due to Helm requirement prod  
  enable_kong              = false  # Disabled for prod
  monitoring_namespace     = "monitoring"
  grafana_admin_password   = "prod-admin-123"  # Use stronger password in prod
  prometheus_storage_size  = "20Gi"   # Reduced for prod
  grafana_storage_size     = "5Gi"    # Reduced for prod
  grafana_ingress_enabled  = false   # Disabled for prod
  grafana_ingress_host     = "grafana-prod.local"
  
  # FIXED: EKS cluster connection information for Kubernetes/Helm providers
  # These values will be populated automatically by the EKS cluster module outputs
  cluster_endpoint      = "https://69E7E84B6E0D379CA6171E17551E9DAC.gr7.us-east-1.eks.amazonaws.com"
  cluster_ca_certificate = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lJRHhBWkNzcllGZGt3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRBeE5URXdOREEyTXpsYUZ3MHpOREF4TkRrd05EQTJNemxhTUJVeApFekFSQmdOVkJBTVRDbXQxWW1WeWJtVjBaWE13Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURrRE5DUXNLSWtZNFNmOWxZcVYrVHM2dkZsOVNBSUlrR3puM0U5dkJVUFlLRjBCOGZvOWZ2cVZGVzMKNUh5QXNadnBXRzFFbmJJOG5neTIzUDduZjlybkR2c0N6ZnljU3U4N2hKWnIrdDNCbGFhWEhPRlVPcFRxRjlTZApMeFlsZjVaSkN1RllDbVlHUTNHdWhhVWRFNzNKT0tMdjZkVzd4MjVzSGFTSDJzWTZIQTJoRUNBbVcyOHd5Q0F4ClNMWTNnbVVEaXBJQTdQL0Zuai96OWw3N1R2M3h1N1lUR3h0SXhQcEhSVkNMSGNUa3NOelBoVVFJSEU2MkRyZmEKUWtDakgvV0xwOGtxOUN6U09QS3VJcHlzSkFBWHZGVXMrNEprUStmdEJMd0VVOFhyT0lhT3h5eFpZMHZ3QmgwRgpEWWdKbzZIMjY5eEpTVUVjcXpjWHg3Q3JBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQVBCZ05WCkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlNKdFlUSGMvL1FEZGNyWFFwWGVvWXVZTFJ1M1RBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FRRUFqY1AyTzdrYnFUUVJ4SHozZHVoMUJCNUcyaW1Ea3pOUkxoVUhZdjJnY0VydwpCKzVJV1o4ZVQyb2E5RGdneXhTV0JZeWN0QkQrckpSZkh5b081cm9rQXFBekRzb08rWmNTVjg0VGlSNHl5VnZ2CkcwS1UveUtaVmlPZUJtTjI4RHNQTU5jZnVOZWhKUzUxWXl5a0lKL2RTcmY0TTZ2QWxUYjBRVHl5VU1CMSsxZEsKYzdjTkVzc0NRUGVQUHByRUE4djZxdDhqOWJXQXlGSXJUTGlnUmo2UjFxbkNYeWY0QWFFbmJ2Q3FxQzlveE5FRAo3bVQyRXAzdCtjcG9KVFp1bVVtczNaRG9nMFVBL01OUnQyRXNUakxCZlVrMXBHN0JkRlVmK2dBTTYveHVnTlk2ClMwUXNRYWdLeloyaXNxbGRGSWxxaDVUSXV3a28wa0Y0L1E4Y1JnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  
  # IRSA Configuration - REQUIRED for EBS CSI driver and other addons
  oidc_provider_arn = "arn:aws:iam::436123228774:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/69E7E84B6E0D379CA6171E17551E9DAC"
}
